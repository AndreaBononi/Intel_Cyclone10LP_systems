
basic_system.elf:     file format elf32-littlenios2
basic_system.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000158 memsz 0x00000158 flags r-x
    LOAD off    0x00001178 vaddr 0x00000178 paddr 0x0000017c align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00000180 vaddr 0x00000180 paddr 0x00000180 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  0000117c  2**0
                  CONTENTS
  2 .text         00000158  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000000  00000178  00000180  0000117c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .rwdata       00000004  00000178  0000017c  00001178  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  00000180  00000180  00001180  2**2
                  ALLOC, SMALL_DATA
  6 .OCRAM        00000000  0000018c  0000018c  0000117c  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000128  00000000  00000000  000011b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00000829  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00000522  00000000  00000000  00001b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00000461  00000000  00000000  00002023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000134  00000000  00000000  00002484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    0000038d  00000000  00000000  000025b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000010  00000000  00000000  00002948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000020  00000000  00000000  00002958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loclists 00000101  00000000  00000000  00002978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000049  00000000  00000000  00002a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000405  00000000  00000000  00002ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  00003c0a  2**0
                  CONTENTS, READONLY
 20 .cpu          00000005  00000000  00000000  00003c0d  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00003c12  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00003c13  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00003c14  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00003c1d  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00003c26  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000c  00000000  00000000  00003c2f  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000036  00000000  00000000  00003c3b  2**0
                  CONTENTS, READONLY
 28 .jdi          000050bd  00000000  00000000  00003c71  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00038c25  00000000  00000000  00008d2e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000178 l    d  .rodata	00000000 .rodata
00000178 l    d  .rwdata	00000000 .rwdata
00000180 l    d  .bss	00000000 .bss
0000018c l    d  .OCRAM	00000000 .OCRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 basic_system_main.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcpy.c
000000f0 g     F .text	0000002c alt_main
0000017c g       *ABS*	00000000 __flash_rwdata_start
00000178 g     O .rwdata	00000004 jtag_uart
00000148 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000184 g     O .bss	00000004 alt_argv
00008178 g       *ABS*	00000000 _gp
00000150 g     F .text	00000028 memcpy
0000018c g       *ABS*	00000000 __bss_end
00000140 g     F .text	00000004 alt_dcache_flush_all
0000017c g       *ABS*	00000000 __ram_rwdata_end
00000178 g       *ABS*	00000000 __ram_rodata_end
0000018c g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00000020 g     F .text	0000003c _start
0000013c g     F .text	00000004 alt_sys_init
00000178 g       *ABS*	00000000 __ram_rwdata_start
00000178 g       *ABS*	00000000 __ram_rodata_start
0000018c g       *ABS*	00000000 __alt_stack_base
00000180 g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000010 main
00000180 g     O .bss	00000004 alt_envp
00000178 g       *ABS*	00000000 __flash_rodata_start
0000011c g     F .text	00000020 alt_irq_init
00000188 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000017c g       *ABS*	00000000 _edata
0000018c g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
00004000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00000144 g     F .text	00000004 alt_icache_flush_all
0000006c g     F .text	00000084 alt_load
00000000 g       *ABS*	00000000 __alt_mem_OCRAM



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a05e14 	ori	gp,gp,33144
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10806014 	ori	r2,r2,384

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c06314 	ori	r3,r3,396

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	000006c0 	call	6c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00000f00 	call	f0 <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <alt_after_alt_main>

0000005c <main>:
	int flag;

	while( 1 )
	{
		// read switches state
		flag = IORD_ALTERA_AVALON_PIO_DATA( SWITCHES_BASE );
  5c:	00940437 	ldwio	r2,20496(zero)
		// set LEDs state
		IOWR_ALTERA_AVALON_PIO_DATA( LEDS_BASE, flag & 0xff );
  60:	10803fcc 	andi	r2,r2,255
  64:	00940035 	stwio	r2,20480(zero)
	while( 1 )
  68:	003ffc06 	br	5c <main>

0000006c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  6c:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  70:	01000034 	movhi	r4,0
  74:	01400034 	movhi	r5,0
  78:	dfc00015 	stw	ra,0(sp)
  7c:	21005e04 	addi	r4,r4,376
  80:	29405f04 	addi	r5,r5,380
  84:	21400426 	beq	r4,r5,98 <alt_load+0x2c>
  {
    while( to != end )
    {
      *to++ = *from++;
  88:	01800034 	movhi	r6,0
  8c:	31805f04 	addi	r6,r6,380
  90:	310dc83a 	sub	r6,r6,r4
  94:	00001500 	call	150 <memcpy>
  if (to != from)
  98:	01000034 	movhi	r4,0
  9c:	01400034 	movhi	r5,0
  a0:	21000804 	addi	r4,r4,32
  a4:	29400804 	addi	r5,r5,32
  a8:	21400426 	beq	r4,r5,bc <alt_load+0x50>
      *to++ = *from++;
  ac:	01800034 	movhi	r6,0
  b0:	31800804 	addi	r6,r6,32
  b4:	310dc83a 	sub	r6,r6,r4
  b8:	00001500 	call	150 <memcpy>
  if (to != from)
  bc:	01000034 	movhi	r4,0
  c0:	01400034 	movhi	r5,0
  c4:	21005e04 	addi	r4,r4,376
  c8:	29405e04 	addi	r5,r5,376
  cc:	21400426 	beq	r4,r5,e0 <alt_load+0x74>
      *to++ = *from++;
  d0:	01800034 	movhi	r6,0
  d4:	31805e04 	addi	r6,r6,376
  d8:	310dc83a 	sub	r6,r6,r4
  dc:	00001500 	call	150 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  e0:	00001400 	call	140 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  e4:	dfc00017 	ldw	ra,0(sp)
  e8:	dec00104 	addi	sp,sp,4
  alt_icache_flush_all();
  ec:	00001441 	jmpi	144 <alt_icache_flush_all>

000000f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  f0:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  f4:	0009883a 	mov	r4,zero
{
  f8:	dfc00015 	stw	ra,0(sp)
  alt_irq_init (NULL);
  fc:	000011c0 	call	11c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100:	000013c0 	call	13c <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 104:	d1a00217 	ldw	r6,-32760(gp)
 108:	d1600317 	ldw	r5,-32756(gp)
 10c:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 110:	dfc00017 	ldw	ra,0(sp)
 114:	dec00104 	addi	sp,sp,4
  main (alt_argc, alt_argv, alt_envp);
 118:	000005c1 	jmpi	5c <main>

0000011c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 11c:	deffff04 	addi	sp,sp,-4
 120:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
 124:	00001480 	call	148 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 128:	00800044 	movi	r2,1
 12c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 130:	dfc00017 	ldw	ra,0(sp)
 134:	dec00104 	addi	sp,sp,4
 138:	f800283a 	ret

0000013c <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
}
 13c:	f800283a 	ret

00000140 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 140:	f800283a 	ret

00000144 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 144:	f800283a 	ret

00000148 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 148:	000170fa 	wrctl	ienable,zero
}
 14c:	f800283a 	ret

00000150 <memcpy>:
 150:	2005883a 	mov	r2,r4
 154:	0007883a 	mov	r3,zero
 158:	30c0011e 	bne	r6,r3,160 <memcpy+0x10>
 15c:	f800283a 	ret
 160:	28cf883a 	add	r7,r5,r3
 164:	39c00003 	ldbu	r7,0(r7)
 168:	10c9883a 	add	r4,r2,r3
 16c:	18c00044 	addi	r3,r3,1
 170:	21c00005 	stb	r7,0(r4)
 174:	003ff806 	br	158 <memcpy+0x8>
