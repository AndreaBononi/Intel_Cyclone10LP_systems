-- avs_hram_converter_TEST.vhd

-- Generated using ACDS version 22.1 917

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity avs_hram_converter_TEST is
	port (
		avalon_slave_address             : in    std_logic_vector(31 downto 0) := (others => '0'); -- avalon_slave.address
		avalon_slave_read                : in    std_logic                     := '0';             --             .read
		avalon_slave_readdata            : out   std_logic_vector(15 downto 0);                    --             .readdata
		avalon_slave_write               : in    std_logic                     := '0';             --             .write
		avalon_slave_writedata           : in    std_logic_vector(15 downto 0) := (others => '0'); --             .writedata
		avalon_slave_waitrequest         : out   std_logic;                                        --             .waitrequest
		avalon_slave_readdatavalid       : out   std_logic;                                        --             .readdatavalid
		avalon_slave_burstcount          : in    std_logic_vector(10 downto 0) := (others => '0'); --             .burstcount
		clk_clk                          : in    std_logic                     := '0';             --          clk.clk
		hbus_clock_outclk                : out   std_logic;                                        --   hbus_clock.outclk
		hyperbus_data                    : inout std_logic_vector(7 downto 0)  := (others => '0'); --     hyperbus.data
		hyperbus_chipselect_n            : out   std_logic;                                        --             .chipselect_n
		hyperbus_localreset_n            : out   std_logic;                                        --             .localreset_n
		hyperbus_strobe_to_memory        : in    std_logic                     := '0';             --             .strobe_to_memory
		hyperbus_shiftedstrobe_to_memory : in    std_logic                     := '0';             --             .shiftedstrobe_to_memory
		hyperbus_strobe_from_memory      : out   std_logic;                                        --             .strobe_from_memory
		reset_n_reset_n                  : in    std_logic                     := '0'              --      reset_n.reset_n
	);
end entity avs_hram_converter_TEST;

architecture rtl of avs_hram_converter_TEST is
	component avs_hram_mainconv_TEST is
		generic (
			drive_strength : std_logic_vector(2 downto 0) := "000"
		);
		port (
			clk                  : in    std_logic                     := 'X';             -- clk
			avs_address          : in    std_logic_vector(31 downto 0) := (others => 'X'); -- address
			avs_read             : in    std_logic                     := 'X';             -- read
			avs_readdata         : out   std_logic_vector(15 downto 0);                    -- readdata
			avs_write            : in    std_logic                     := 'X';             -- write
			avs_writedata        : in    std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			avs_waitrequest      : out   std_logic;                                        -- waitrequest
			avs_readdatavalid    : out   std_logic;                                        -- readdatavalid
			avs_burstcount       : in    std_logic_vector(10 downto 0) := (others => 'X'); -- burstcount
			reset_n              : in    std_logic                     := 'X';             -- reset_n
			hram_DQ              : inout std_logic_vector(7 downto 0)  := (others => 'X'); -- data
			hram_CS_n            : out   std_logic;                                        -- chipselect_n
			hram_RESET_n         : out   std_logic;                                        -- localreset_n
			hram_RWDS_in         : in    std_logic                     := 'X';             -- strobe_to_memory
			hram_RWDS_in_90shift : in    std_logic                     := 'X';             -- shiftedstrobe_to_memory
			hram_RWDS_out        : out   std_logic;                                        -- strobe_from_memory
			clk90                : out   std_logic;                                        -- inclk
			hCK_enable           : out   std_logic                                         -- ena
		);
	end component avs_hram_mainconv_TEST;

	component avs_hram_converter_TEST_clkctrl is
		port (
			inclk  : in  std_logic := 'X'; -- inclk
			ena    : in  std_logic := 'X'; -- ena
			outclk : out std_logic         -- outclk
		);
	end component avs_hram_converter_TEST_clkctrl;

	component altera_reset_controller is
		generic (
			NUM_RESET_INPUTS          : integer := 6;
			OUTPUT_RESET_SYNC_EDGES   : string  := "deassert";
			SYNC_DEPTH                : integer := 2;
			RESET_REQUEST_PRESENT     : integer := 0;
			RESET_REQ_WAIT_TIME       : integer := 1;
			MIN_RST_ASSERTION_TIME    : integer := 3;
			RESET_REQ_EARLY_DSRT_TIME : integer := 1;
			USE_RESET_REQUEST_IN0     : integer := 0;
			USE_RESET_REQUEST_IN1     : integer := 0;
			USE_RESET_REQUEST_IN2     : integer := 0;
			USE_RESET_REQUEST_IN3     : integer := 0;
			USE_RESET_REQUEST_IN4     : integer := 0;
			USE_RESET_REQUEST_IN5     : integer := 0;
			USE_RESET_REQUEST_IN6     : integer := 0;
			USE_RESET_REQUEST_IN7     : integer := 0;
			USE_RESET_REQUEST_IN8     : integer := 0;
			USE_RESET_REQUEST_IN9     : integer := 0;
			USE_RESET_REQUEST_IN10    : integer := 0;
			USE_RESET_REQUEST_IN11    : integer := 0;
			USE_RESET_REQUEST_IN12    : integer := 0;
			USE_RESET_REQUEST_IN13    : integer := 0;
			USE_RESET_REQUEST_IN14    : integer := 0;
			USE_RESET_REQUEST_IN15    : integer := 0;
			ADAPT_RESET_REQUEST       : integer := 0
		);
		port (
			reset_in0      : in  std_logic := 'X'; -- reset
			clk            : in  std_logic := 'X'; -- clk
			reset_out      : out std_logic;        -- reset
			reset_req      : out std_logic;        -- reset_req
			reset_req_in0  : in  std_logic := 'X'; -- reset_req
			reset_in1      : in  std_logic := 'X'; -- reset
			reset_req_in1  : in  std_logic := 'X'; -- reset_req
			reset_in2      : in  std_logic := 'X'; -- reset
			reset_req_in2  : in  std_logic := 'X'; -- reset_req
			reset_in3      : in  std_logic := 'X'; -- reset
			reset_req_in3  : in  std_logic := 'X'; -- reset_req
			reset_in4      : in  std_logic := 'X'; -- reset
			reset_req_in4  : in  std_logic := 'X'; -- reset_req
			reset_in5      : in  std_logic := 'X'; -- reset
			reset_req_in5  : in  std_logic := 'X'; -- reset_req
			reset_in6      : in  std_logic := 'X'; -- reset
			reset_req_in6  : in  std_logic := 'X'; -- reset_req
			reset_in7      : in  std_logic := 'X'; -- reset
			reset_req_in7  : in  std_logic := 'X'; -- reset_req
			reset_in8      : in  std_logic := 'X'; -- reset
			reset_req_in8  : in  std_logic := 'X'; -- reset_req
			reset_in9      : in  std_logic := 'X'; -- reset
			reset_req_in9  : in  std_logic := 'X'; -- reset_req
			reset_in10     : in  std_logic := 'X'; -- reset
			reset_req_in10 : in  std_logic := 'X'; -- reset_req
			reset_in11     : in  std_logic := 'X'; -- reset
			reset_req_in11 : in  std_logic := 'X'; -- reset_req
			reset_in12     : in  std_logic := 'X'; -- reset
			reset_req_in12 : in  std_logic := 'X'; -- reset_req
			reset_in13     : in  std_logic := 'X'; -- reset
			reset_req_in13 : in  std_logic := 'X'; -- reset_req
			reset_in14     : in  std_logic := 'X'; -- reset
			reset_req_in14 : in  std_logic := 'X'; -- reset_req
			reset_in15     : in  std_logic := 'X'; -- reset
			reset_req_in15 : in  std_logic := 'X'  -- reset_req
		);
	end component altera_reset_controller;

	signal avs_hram_mainconv_test_clkctrl_master_inclk : std_logic; -- avs_hram_mainconv_TEST:clk90 -> clkctrl:inclk
	signal avs_hram_mainconv_test_clkctrl_master_ena   : std_logic; -- avs_hram_mainconv_TEST:hCK_enable -> clkctrl:ena
	signal rst_controller_reset_out_reset              : std_logic; -- rst_controller:reset_out -> rst_controller_reset_out_reset:in
	signal reset_n_reset_n_ports_inv                   : std_logic; -- reset_n_reset_n:inv -> rst_controller:reset_in0
	signal rst_controller_reset_out_reset_ports_inv    : std_logic; -- rst_controller_reset_out_reset:inv -> avs_hram_mainconv_TEST:reset_n

begin

	avs_hram_mainconv_test_inst : component avs_hram_mainconv_TEST
		generic map (
			drive_strength => "000"
		)
		port map (
			clk                  => clk_clk,                                     --                 clock.clk
			avs_address          => avalon_slave_address,                        --          avalon_slave.address
			avs_read             => avalon_slave_read,                           --                      .read
			avs_readdata         => avalon_slave_readdata,                       --                      .readdata
			avs_write            => avalon_slave_write,                          --                      .write
			avs_writedata        => avalon_slave_writedata,                      --                      .writedata
			avs_waitrequest      => avalon_slave_waitrequest,                    --                      .waitrequest
			avs_readdatavalid    => avalon_slave_readdatavalid,                  --                      .readdatavalid
			avs_burstcount       => avalon_slave_burstcount,                     --                      .burstcount
			reset_n              => rst_controller_reset_out_reset_ports_inv,    --               reset_n.reset_n
			hram_DQ              => hyperbus_data,                               -- hyperbus_reduced_TEST.data
			hram_CS_n            => hyperbus_chipselect_n,                       --                      .chipselect_n
			hram_RESET_n         => hyperbus_localreset_n,                       --                      .localreset_n
			hram_RWDS_in         => hyperbus_strobe_to_memory,                   --                      .strobe_to_memory
			hram_RWDS_in_90shift => hyperbus_shiftedstrobe_to_memory,            --                      .shiftedstrobe_to_memory
			hram_RWDS_out        => hyperbus_strobe_from_memory,                 --                      .strobe_from_memory
			clk90                => avs_hram_mainconv_test_clkctrl_master_inclk, --        clkctrl_master.inclk
			hCK_enable           => avs_hram_mainconv_test_clkctrl_master_ena    --                      .ena
		);

	clkctrl : component avs_hram_converter_TEST_clkctrl
		port map (
			inclk  => avs_hram_mainconv_test_clkctrl_master_inclk, --  altclkctrl_input.inclk
			ena    => avs_hram_mainconv_test_clkctrl_master_ena,   --                  .ena
			outclk => hbus_clock_outclk                            -- altclkctrl_output.outclk
		);

	rst_controller : component altera_reset_controller
		generic map (
			NUM_RESET_INPUTS          => 1,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => reset_n_reset_n_ports_inv,      -- reset_in0.reset
			clk            => clk_clk,                        --       clk.clk
			reset_out      => rst_controller_reset_out_reset, -- reset_out.reset
			reset_req      => open,                           -- (terminated)
			reset_req_in0  => '0',                            -- (terminated)
			reset_in1      => '0',                            -- (terminated)
			reset_req_in1  => '0',                            -- (terminated)
			reset_in2      => '0',                            -- (terminated)
			reset_req_in2  => '0',                            -- (terminated)
			reset_in3      => '0',                            -- (terminated)
			reset_req_in3  => '0',                            -- (terminated)
			reset_in4      => '0',                            -- (terminated)
			reset_req_in4  => '0',                            -- (terminated)
			reset_in5      => '0',                            -- (terminated)
			reset_req_in5  => '0',                            -- (terminated)
			reset_in6      => '0',                            -- (terminated)
			reset_req_in6  => '0',                            -- (terminated)
			reset_in7      => '0',                            -- (terminated)
			reset_req_in7  => '0',                            -- (terminated)
			reset_in8      => '0',                            -- (terminated)
			reset_req_in8  => '0',                            -- (terminated)
			reset_in9      => '0',                            -- (terminated)
			reset_req_in9  => '0',                            -- (terminated)
			reset_in10     => '0',                            -- (terminated)
			reset_req_in10 => '0',                            -- (terminated)
			reset_in11     => '0',                            -- (terminated)
			reset_req_in11 => '0',                            -- (terminated)
			reset_in12     => '0',                            -- (terminated)
			reset_req_in12 => '0',                            -- (terminated)
			reset_in13     => '0',                            -- (terminated)
			reset_req_in13 => '0',                            -- (terminated)
			reset_in14     => '0',                            -- (terminated)
			reset_req_in14 => '0',                            -- (terminated)
			reset_in15     => '0',                            -- (terminated)
			reset_req_in15 => '0'                             -- (terminated)
		);

	reset_n_reset_n_ports_inv <= not reset_n_reset_n;

	rst_controller_reset_out_reset_ports_inv <= not rst_controller_reset_out_reset;

end architecture rtl; -- of avs_hram_converter_TEST
