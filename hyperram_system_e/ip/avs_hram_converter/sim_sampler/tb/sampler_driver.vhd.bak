-- BRIEF DESCRIPTION: driver for sampler testbench
-- COMMENTS:
-- it provides to the sampler the DDR input and the corresponding edge-aligned RWDS signal
-- the input is provided to the DUT only after an initial reset
-- it generates the start_sim signal ('0' at the beginning, '1' after the initial reset)
-- it generates the stop_sim signal ('0' until the end of the input file, '1' after)
-- the DDR input data are stored in the "sampler_in.txt" file (one per row)

library 	ieee;
use 			ieee.std_logic_1164.all;
use 			ieee.numeric_std.all;
use 			ieee.std_logic_unsigned.all;
use 			ieee.std_logic_textio.all;
library 	std;
use 			std.textio.all;

entity sampler_driver is
generic
(
	clock_shift   : time := 0 ns;
	clock_period  : time := 10 ns
);
port
(
	clk							  : in	std_logic;
	rst_n						  : in  std_logic;
	start_sim				  :	out	std_logic := '0';
	stop_sim				  : out	std_logic := '0';
  sampler_DDR_in    : out std_logic_vector(7 downto 0);
  sampler_rwds_in   : out std_logic := '0'
);
end sampler_driver;

architecture tb of sampler_driver is

	file input_file	: text;

	begin

    input_driving       : process ( clk, rst_n )
    variable inputline	: line;
		variable file_stat  : file_open_status;
    variable valid_line	:	std_logic := '0';
    variable ddr_data   : std_logic_vector(7 downto 0);
    begin
      file_open( file_stat, input_file, "./sampler_in.txt", read_mode );
      if ( rst_n = '1' ) then
        start_sim <= '1';
      elsif ( not endfile( input_file ) ) then
        if ( rising_edge( clk )) then
          while ( valid_line = '0' ) loop
						readline( input_file, inputline );
						if not ( inputline.all'length = 0 or inputline.all(1) = '#' ) then
							valid_line := '1';
						end if;
					end loop;
					valid_line := '0';
          read( inputline, ddr_data );
          sampler_DDR_in <= ddr_data after clock_shift;
          sampler_rwds_in <= '1' after clock_shift;
        elsif ( falling_edge( clk ) ) then
          while ( valid_line = '0' ) loop
						readline( input_file, inputline );
						if not ( inputline.all'length = 0 or inputline.all(1) = '#' ) then
							valid_line := '1';
						end if;
					end loop;
					valid_line := '0';
          read( inputline, ddr_data );
          sampler_DDR_in <= ddr_data after clock_shift;
          sampler_rwds_in <= '0' after clock_shift;
        end if;
      else
        if ( rising_edge( clk ) ) then
          stop_sim := '1' after clock_shift;
        end if;
      end if;

end tb;