-- avs_hram_converter_TEST_basic_avs_hram_converter.vhd

-- This file was auto-generated from avs_hram_converter_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 22.1 917

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity avs_hram_converter_TEST_basic_avs_hram_converter is
	port (
		avalon_slave_address         : in    std_logic_vector(22 downto 0) := (others => '0'); --    avalon_slave.address
		avalon_slave_read            : in    std_logic                     := '0';             --                .read
		avalon_slave_readdata        : out   std_logic_vector(15 downto 0);                    --                .readdata
		avalon_slave_write           : in    std_logic                     := '0';             --                .write
		avalon_slave_writedata       : in    std_logic_vector(15 downto 0) := (others => '0'); --                .writedata
		avalon_slave_waitrequest     : out   std_logic;                                        --                .waitrequest
		avalon_slave_readdatavalid   : out   std_logic;                                        --                .readdatavalid
		avalon_slave_burstcount      : in    std_logic_vector(10 downto 0) := (others => '0'); --                .burstcount
		clk_clk                      : in    std_logic                     := '0';             --             clk.clk
		hyperbus_clock_outclk        : out   std_logic;                                        --  hyperbus_clock.outclk
		hyperbus_master_chipselect   : out   std_logic;                                        -- hyperbus_master.chipselect
		hyperbus_master_data         : inout std_logic_vector(7 downto 0)  := (others => '0'); --                .data
		hyperbus_master_memory_reset : out   std_logic;                                        --                .memory_reset
		hyperbus_master_strobe       : inout std_logic                     := '0';             --                .strobe
		reset_reset_n                : in    std_logic                     := '0'              --           reset.reset_n
	);
end entity avs_hram_converter_TEST_basic_avs_hram_converter;

architecture rtl of avs_hram_converter_TEST_basic_avs_hram_converter is
	component avs_hram_mainconv is
		generic (
			drive_strength : std_logic_vector(2 downto 0) := "000"
		);
		port (
			clk               : in    std_logic                     := 'X';             -- clk
			reset_n           : in    std_logic                     := 'X';             -- reset_n
			avs_address       : in    std_logic_vector(22 downto 0) := (others => 'X'); -- address
			avs_read          : in    std_logic                     := 'X';             -- read
			avs_readdata      : out   std_logic_vector(15 downto 0);                    -- readdata
			avs_write         : in    std_logic                     := 'X';             -- write
			avs_writedata     : in    std_logic_vector(15 downto 0) := (others => 'X'); -- writedata
			avs_waitrequest   : out   std_logic;                                        -- waitrequest
			avs_readdatavalid : out   std_logic;                                        -- readdatavalid
			avs_burstcount    : in    std_logic_vector(10 downto 0) := (others => 'X'); -- burstcount
			hram_CS_n         : out   std_logic;                                        -- chipselect
			hram_DQ           : inout std_logic_vector(7 downto 0)  := (others => 'X'); -- data
			hram_RESET_n      : out   std_logic;                                        -- memory_reset
			hram_RWDS         : inout std_logic                     := 'X';             -- strobe
			clk90             : out   std_logic;                                        -- inclk
			hCK_enable        : out   std_logic                                         -- ena
		);
	end component avs_hram_mainconv;

	component avs_hram_converter_TEST_basic_avs_hram_converter_clkctrl is
		port (
			inclk  : in  std_logic := 'X'; -- inclk
			ena    : in  std_logic := 'X'; -- ena
			outclk : out std_logic         -- outclk
		);
	end component avs_hram_converter_TEST_basic_avs_hram_converter_clkctrl;

	component altera_reset_controller is
		generic (
			NUM_RESET_INPUTS          : integer := 6;
			OUTPUT_RESET_SYNC_EDGES   : string  := "deassert";
			SYNC_DEPTH                : integer := 2;
			RESET_REQUEST_PRESENT     : integer := 0;
			RESET_REQ_WAIT_TIME       : integer := 1;
			MIN_RST_ASSERTION_TIME    : integer := 3;
			RESET_REQ_EARLY_DSRT_TIME : integer := 1;
			USE_RESET_REQUEST_IN0     : integer := 0;
			USE_RESET_REQUEST_IN1     : integer := 0;
			USE_RESET_REQUEST_IN2     : integer := 0;
			USE_RESET_REQUEST_IN3     : integer := 0;
			USE_RESET_REQUEST_IN4     : integer := 0;
			USE_RESET_REQUEST_IN5     : integer := 0;
			USE_RESET_REQUEST_IN6     : integer := 0;
			USE_RESET_REQUEST_IN7     : integer := 0;
			USE_RESET_REQUEST_IN8     : integer := 0;
			USE_RESET_REQUEST_IN9     : integer := 0;
			USE_RESET_REQUEST_IN10    : integer := 0;
			USE_RESET_REQUEST_IN11    : integer := 0;
			USE_RESET_REQUEST_IN12    : integer := 0;
			USE_RESET_REQUEST_IN13    : integer := 0;
			USE_RESET_REQUEST_IN14    : integer := 0;
			USE_RESET_REQUEST_IN15    : integer := 0;
			ADAPT_RESET_REQUEST       : integer := 0
		);
		port (
			reset_in0      : in  std_logic := 'X'; -- reset
			clk            : in  std_logic := 'X'; -- clk
			reset_out      : out std_logic;        -- reset
			reset_req      : out std_logic;        -- reset_req
			reset_req_in0  : in  std_logic := 'X'; -- reset_req
			reset_in1      : in  std_logic := 'X'; -- reset
			reset_req_in1  : in  std_logic := 'X'; -- reset_req
			reset_in2      : in  std_logic := 'X'; -- reset
			reset_req_in2  : in  std_logic := 'X'; -- reset_req
			reset_in3      : in  std_logic := 'X'; -- reset
			reset_req_in3  : in  std_logic := 'X'; -- reset_req
			reset_in4      : in  std_logic := 'X'; -- reset
			reset_req_in4  : in  std_logic := 'X'; -- reset_req
			reset_in5      : in  std_logic := 'X'; -- reset
			reset_req_in5  : in  std_logic := 'X'; -- reset_req
			reset_in6      : in  std_logic := 'X'; -- reset
			reset_req_in6  : in  std_logic := 'X'; -- reset_req
			reset_in7      : in  std_logic := 'X'; -- reset
			reset_req_in7  : in  std_logic := 'X'; -- reset_req
			reset_in8      : in  std_logic := 'X'; -- reset
			reset_req_in8  : in  std_logic := 'X'; -- reset_req
			reset_in9      : in  std_logic := 'X'; -- reset
			reset_req_in9  : in  std_logic := 'X'; -- reset_req
			reset_in10     : in  std_logic := 'X'; -- reset
			reset_req_in10 : in  std_logic := 'X'; -- reset_req
			reset_in11     : in  std_logic := 'X'; -- reset
			reset_req_in11 : in  std_logic := 'X'; -- reset_req
			reset_in12     : in  std_logic := 'X'; -- reset
			reset_req_in12 : in  std_logic := 'X'; -- reset_req
			reset_in13     : in  std_logic := 'X'; -- reset
			reset_req_in13 : in  std_logic := 'X'; -- reset_req
			reset_in14     : in  std_logic := 'X'; -- reset
			reset_req_in14 : in  std_logic := 'X'; -- reset_req
			reset_in15     : in  std_logic := 'X'; -- reset
			reset_req_in15 : in  std_logic := 'X'  -- reset_req
		);
	end component altera_reset_controller;

	signal avs_hram_mainconv_hyperbus_clkctrl_master_inclk : std_logic; -- avs_hram_mainconv:clk90 -> clkctrl:inclk
	signal avs_hram_mainconv_hyperbus_clkctrl_master_ena   : std_logic; -- avs_hram_mainconv:hCK_enable -> clkctrl:ena
	signal rst_controller_reset_out_reset                  : std_logic; -- rst_controller:reset_out -> rst_controller_reset_out_reset:in
	signal reset_reset_n_ports_inv                         : std_logic; -- reset_reset_n:inv -> rst_controller:reset_in0
	signal rst_controller_reset_out_reset_ports_inv        : std_logic; -- rst_controller_reset_out_reset:inv -> avs_hram_mainconv:reset_n

begin

	avs_hram_mainconv : component avs_hram_mainconv
		generic map (
			drive_strength => "000"
		)
		port map (
			clk               => clk_clk,                                         --                   clock.clk
			reset_n           => rst_controller_reset_out_reset_ports_inv,        --                   reset.reset_n
			avs_address       => avalon_slave_address,                            --            avalon_slave.address
			avs_read          => avalon_slave_read,                               --                        .read
			avs_readdata      => avalon_slave_readdata,                           --                        .readdata
			avs_write         => avalon_slave_write,                              --                        .write
			avs_writedata     => avalon_slave_writedata,                          --                        .writedata
			avs_waitrequest   => avalon_slave_waitrequest,                        --                        .waitrequest
			avs_readdatavalid => avalon_slave_readdatavalid,                      --                        .readdatavalid
			avs_burstcount    => avalon_slave_burstcount,                         --                        .burstcount
			hram_CS_n         => hyperbus_master_chipselect,                      --         hyperbus_master.chipselect
			hram_DQ           => hyperbus_master_data,                            --                        .data
			hram_RESET_n      => hyperbus_master_memory_reset,                    --                        .memory_reset
			hram_RWDS         => hyperbus_master_strobe,                          --                        .strobe
			clk90             => avs_hram_mainconv_hyperbus_clkctrl_master_inclk, -- hyperbus_clkctrl_master.inclk
			hCK_enable        => avs_hram_mainconv_hyperbus_clkctrl_master_ena    --                        .ena
		);

	clkctrl : component avs_hram_converter_TEST_basic_avs_hram_converter_clkctrl
		port map (
			inclk  => avs_hram_mainconv_hyperbus_clkctrl_master_inclk, --  altclkctrl_input.inclk
			ena    => avs_hram_mainconv_hyperbus_clkctrl_master_ena,   --                  .ena
			outclk => hyperbus_clock_outclk                            -- altclkctrl_output.outclk
		);

	rst_controller : component altera_reset_controller
		generic map (
			NUM_RESET_INPUTS          => 1,
			OUTPUT_RESET_SYNC_EDGES   => "deassert",
			SYNC_DEPTH                => 2,
			RESET_REQUEST_PRESENT     => 0,
			RESET_REQ_WAIT_TIME       => 1,
			MIN_RST_ASSERTION_TIME    => 3,
			RESET_REQ_EARLY_DSRT_TIME => 1,
			USE_RESET_REQUEST_IN0     => 0,
			USE_RESET_REQUEST_IN1     => 0,
			USE_RESET_REQUEST_IN2     => 0,
			USE_RESET_REQUEST_IN3     => 0,
			USE_RESET_REQUEST_IN4     => 0,
			USE_RESET_REQUEST_IN5     => 0,
			USE_RESET_REQUEST_IN6     => 0,
			USE_RESET_REQUEST_IN7     => 0,
			USE_RESET_REQUEST_IN8     => 0,
			USE_RESET_REQUEST_IN9     => 0,
			USE_RESET_REQUEST_IN10    => 0,
			USE_RESET_REQUEST_IN11    => 0,
			USE_RESET_REQUEST_IN12    => 0,
			USE_RESET_REQUEST_IN13    => 0,
			USE_RESET_REQUEST_IN14    => 0,
			USE_RESET_REQUEST_IN15    => 0,
			ADAPT_RESET_REQUEST       => 0
		)
		port map (
			reset_in0      => reset_reset_n_ports_inv,        -- reset_in0.reset
			clk            => clk_clk,                        --       clk.clk
			reset_out      => rst_controller_reset_out_reset, -- reset_out.reset
			reset_req      => open,                           -- (terminated)
			reset_req_in0  => '0',                            -- (terminated)
			reset_in1      => '0',                            -- (terminated)
			reset_req_in1  => '0',                            -- (terminated)
			reset_in2      => '0',                            -- (terminated)
			reset_req_in2  => '0',                            -- (terminated)
			reset_in3      => '0',                            -- (terminated)
			reset_req_in3  => '0',                            -- (terminated)
			reset_in4      => '0',                            -- (terminated)
			reset_req_in4  => '0',                            -- (terminated)
			reset_in5      => '0',                            -- (terminated)
			reset_req_in5  => '0',                            -- (terminated)
			reset_in6      => '0',                            -- (terminated)
			reset_req_in6  => '0',                            -- (terminated)
			reset_in7      => '0',                            -- (terminated)
			reset_req_in7  => '0',                            -- (terminated)
			reset_in8      => '0',                            -- (terminated)
			reset_req_in8  => '0',                            -- (terminated)
			reset_in9      => '0',                            -- (terminated)
			reset_req_in9  => '0',                            -- (terminated)
			reset_in10     => '0',                            -- (terminated)
			reset_req_in10 => '0',                            -- (terminated)
			reset_in11     => '0',                            -- (terminated)
			reset_req_in11 => '0',                            -- (terminated)
			reset_in12     => '0',                            -- (terminated)
			reset_req_in12 => '0',                            -- (terminated)
			reset_in13     => '0',                            -- (terminated)
			reset_req_in13 => '0',                            -- (terminated)
			reset_in14     => '0',                            -- (terminated)
			reset_req_in14 => '0',                            -- (terminated)
			reset_in15     => '0',                            -- (terminated)
			reset_req_in15 => '0'                             -- (terminated)
		);

	reset_reset_n_ports_inv <= not reset_reset_n;

	rst_controller_reset_out_reset_ports_inv <= not rst_controller_reset_out_reset;

end architecture rtl; -- of avs_hram_converter_TEST_basic_avs_hram_converter
